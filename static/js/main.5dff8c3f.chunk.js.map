{"version":3,"sources":["serviceWorker.js","component/main.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Proj","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","state","value","completed","startColor","endColor","progress","_this","setState","diff","Math","random","dist","min","this","timer","setInterval","clearInterval","classes","props","fillColor","interpolateRgb","interpolate","gradientStops","key","stopColor","color","darker","toString","stopOpacity","offset","brighter","react_default","a","createElement","className","style","Container","maxWidth","container","Grid","spacing","direction","justify","alignItems","paddingTop","item","xs","md","lg","Card","card","CardContent","ReactPlayer_default","url","playing","position","textAlign","CardActions","paddingBottom","marginLeft","paddingRight","index_esm","minValue","maxValue","text","concat","styles","buildStyles","rotation","strokeLinecap","textSize","pathTransitionDuration","pathColor","textColor","trailColor","alt","src","marginRight","data-type","data-width","data-height","data-units","data-min-value","data-max-value","data-major-ticks","data-minor-ticks","data-stroke-ticks","data-highlights","data-color-plate","data-border-shadow-width","data-borders","data-needle-type","data-needle-width","data-needle-circle-size","data-needle-circle-outer","data-needle-circle-inner","data-animation-duration","data-animation-rule","lib_default","margin","radius","percent","textOffsetX","textOffsetY","textRenderer","round","textPixels","valueStyle","fontSize","percentStyle","riseAnimation","waveAnimation","waveFrequency","waveAmplitude","gradient","circleStyle","fill","waveStyle","textStyle","fontFamily","waveTextStyle","sm","data-tick-side","data-number-side","data-needle-side","data-bar-stroke-width","data-bar-begin-circle","data-value","data-start-angle","data-ticks-angle","data-value-box","data-bar-width","LinearProgress","variant","Button","button","Component","withStyles","minWidth","bullet","transform","title","pos","marginBottom","ReactDOM","render","main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dff8c3f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n//import GaugeChart from \"react-gauge-chart\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\n//import Typography from \"@material-ui/core/Typography\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n//import { sizing } from \"@material-ui/system\";\r\n//import GridList from \"@material-ui/core/GridList\";\r\n//import GridListTile from \"@material-ui/core/GridListTile\";\r\n//import Gauge from \"react-radial-gauge\";\r\nimport { color } from \"d3-color\";\r\nimport { interpolateRgb } from \"d3-interpolate\";\r\nimport LiquidFillGauge from \"react-liquid-gauge\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ReactPlayer from \"react-player\";\r\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport canvas from \"canvas-gauges\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nconst styles = {\r\n  card: {\r\n    minWidth: 275\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\"\r\n  },\r\n  title: {\r\n    fontSize: 14\r\n  },\r\n  pos: {\r\n    marginBottom: 12\r\n  }\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  gridList: {\r\n    width: 500,\r\n    height: 450\r\n  }\r\n}));\r\n\r\nclass Proj extends Component {\r\n  state = {\r\n    value: 50,\r\n    completed: 0\r\n  };\r\n  startColor = \"#cf6679\"; // cornflowerblue\r\n  endColor = \"#b00020\"; // crimson\r\n\r\n  componentDidMount() {\r\n    this.timer = setInterval(this.progress, 500);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  progress = () => {\r\n    const { completed } = this.state;\r\n    if (completed === 100) {\r\n      this.setState({ completed: 0 });\r\n    } else {\r\n      const diff = Math.random() * 10;\r\n      var dist = Math.min(completed + diff, 100);\r\n      this.setState({ completed: dist });\r\n    }\r\n  };\r\n  render() {\r\n    const { classes } = this.props;\r\n    /*const bull = <span className={classes.bullet}>•</span>;*/\r\n    const radius = 115;\r\n    const interpolate = interpolateRgb(this.startColor, this.endColor);\r\n    const fillColor = interpolate(this.state.value / 100);\r\n    const gradientStops = [\r\n      {\r\n        key: \"0%\",\r\n        stopColor: color(fillColor)\r\n          .darker(0.5)\r\n          .toString(),\r\n        stopOpacity: 1,\r\n        offset: \"0%\"\r\n      },\r\n      {\r\n        key: \"50%\",\r\n        stopColor: fillColor,\r\n        stopOpacity: 0.75,\r\n        offset: \"50%\"\r\n      },\r\n      {\r\n        key: \"100%\",\r\n        stopColor: color(fillColor)\r\n          .brighter(0.5)\r\n          .toString(),\r\n        stopOpacity: 0.5,\r\n        offset: \"100%\"\r\n      }\r\n    ];\r\n    const degree = 66;\r\n    return (\r\n      <div>\r\n        <div className={classes.root} style={{ backgroundColor: \"#000000\" }}>\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Grid\r\n              container\r\n              spacing=\"2\"\r\n              direction=\"row\"\r\n              justify=\"space-around\"\r\n              alignItems=\"flex-start\"\r\n              style={{ paddingTop: \"10px\" }}\r\n            >\r\n              <Grid item xs={4} md={4} lg={4}>\r\n                <Card\r\n                  className={classes.card}\r\n                  style={{\r\n                    width: 400,\r\n                    height: 300,\r\n                    backgroundColor: \"#282D33\"\r\n                  }}\r\n                >\r\n                  <CardContent>\r\n                    <ReactPlayer\r\n                      url=\"https://www.youtube.com/watch?v=zcikLQZI5wQ\"\r\n                      playing\r\n                      width=\"100%\"\r\n                      height={225}\r\n                      position=\"absolute\"\r\n                    />\r\n                    <h4\r\n                      style={{\r\n                        color: \"#f88\",\r\n                        textAlign: \"center\"\r\n                      }}\r\n                    >\r\n                      Video Feed\r\n                    </h4>\r\n                  </CardContent>\r\n                  <CardActions />\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={5} md={5} lg={5}>\r\n                <Card\r\n                  className={classes.card}\r\n                  style={{\r\n                    width: 500,\r\n                    height: 300,\r\n                    backgroundColor: \"#282D33\"\r\n                  }}\r\n                >\r\n                  <CardContent>\r\n                    <h3\r\n                      style={{\r\n                        color: \"#f88\",\r\n                        textAlign: \"center\",\r\n\r\n                        paddingBottom: \"10px\"\r\n                      }}\r\n                    >\r\n                      Pod Orientation\r\n                    </h3>\r\n                    <div\r\n                      style={{\r\n                        width: \"30%\",\r\n                        display: \"inline-block\",\r\n                        marginLeft: \"15px\",\r\n                        paddingRight: \"5px\"\r\n                      }}\r\n                    >\r\n                      <CircularProgressbar\r\n                        value={degree}\r\n                        minValue={0}\r\n                        maxValue={360}\r\n                        text={`${degree}°`}\r\n                        styles={buildStyles({\r\n                          // Rotation of path and trail, in number of turns (0-1)\r\n                          rotation: 0.25,\r\n\r\n                          // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n                          strokeLinecap: \"butt\",\r\n\r\n                          // Text size\r\n                          textSize: \"16px\",\r\n\r\n                          // How long animation takes to go from one percentage to another, in seconds\r\n                          pathTransitionDuration: 0.5,\r\n\r\n                          // Can specify path transition in more detail, or remove it entirely\r\n                          // pathTransition: 'none',\r\n\r\n                          // Colors\r\n                          pathColor: `rgba(62, 152, 199, ${degree / 360})`,\r\n                          textColor: \"#f88\",\r\n                          trailColor: \"#d6d6d6\"\r\n                        })}\r\n                      />\r\n                      <h5\r\n                        style={{\r\n                          color: \"#f88\",\r\n                          textAlign: \"center\",\r\n\r\n                          paddingBottom: \"10px\"\r\n                        }}\r\n                      >\r\n                        Roll\r\n                      </h5>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        width: \"30%\",\r\n                        display: \"inline-block\",\r\n                        paddingRight: \"5px\"\r\n                      }}\r\n                    >\r\n                      <CircularProgressbar\r\n                        value={27}\r\n                        minValue={0}\r\n                        maxValue={360}\r\n                        text={`${27}°`}\r\n                        styles={buildStyles({\r\n                          // Rotation of path and trail, in number of turns (0-1)\r\n                          rotation: 0.25,\r\n\r\n                          // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n                          strokeLinecap: \"butt\",\r\n\r\n                          // Text size\r\n                          textSize: \"16px\",\r\n\r\n                          // How long animation takes to go from one percentage to another, in seconds\r\n                          pathTransitionDuration: 0.5,\r\n\r\n                          // Can specify path transition in more detail, or remove it entirely\r\n                          // pathTransition: 'none',\r\n\r\n                          // Colors\r\n                          pathColor: `rgba(62, 152, 199, ${degree / 360})`,\r\n                          textColor: \"#f88\",\r\n                          trailColor: \"#d6d6d6\"\r\n                        })}\r\n                      />\r\n                      <h5\r\n                        style={{\r\n                          color: \"#f88\",\r\n                          textAlign: \"center\",\r\n\r\n                          paddingBottom: \"10px\"\r\n                        }}\r\n                      >\r\n                        Pitch\r\n                      </h5>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        width: \"30%\",\r\n                        display: \"inline-block\"\r\n                      }}\r\n                    >\r\n                      <CircularProgressbar\r\n                        value={0}\r\n                        minValue={0}\r\n                        maxValue={360}\r\n                        text={`${0}°`}\r\n                        styles={buildStyles({\r\n                          // Rotation of path and trail, in number of turns (0-1)\r\n                          rotation: 0.25,\r\n\r\n                          // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n                          strokeLinecap: \"butt\",\r\n\r\n                          // Text size\r\n                          textSize: \"16px\",\r\n\r\n                          // How long animation takes to go from one percentage to another, in seconds\r\n                          pathTransitionDuration: 0.5,\r\n\r\n                          // Can specify path transition in more detail, or remove it entirely\r\n                          // pathTransition: 'none',\r\n\r\n                          // Colors\r\n                          pathColor: `rgba(62, 152, 199, ${degree / 360})`,\r\n                          textColor: \"#f88\",\r\n                          trailColor: \"#d6d6d6\"\r\n                        })}\r\n                      />\r\n                      <h5\r\n                        style={{\r\n                          color: \"#f88\",\r\n                          textAlign: \"center\",\r\n\r\n                          paddingBottom: \"10px\"\r\n                        }}\r\n                      >\r\n                        Yaw\r\n                      </h5>\r\n                    </div>\r\n                  </CardContent>\r\n                  <CardActions />\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={3} md={3} lg={3}>\r\n                <Card\r\n                  className={classes.card}\r\n                  style={{\r\n                    width: 300,\r\n                    height: 300,\r\n                    backgroundColor: \"#282D33\"\r\n                  }}\r\n                >\r\n                  <CardContent>\r\n                    <img\r\n                      alt=\"\"\r\n                      src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQjuz7haMESW57roBghEMKFkEDXlw8g9Rybktq3_pZlS7yKjvEn\"\r\n                      width=\"270\"\r\n                      height=\"150\"\r\n                      display=\"block\"\r\n                      marginLeft=\"auto\"\r\n                      marginRight=\"auto\"\r\n                    />\r\n                    <h1\r\n                      style={{\r\n                        color: \"#f88\",\r\n                        textAlign: \"center\"\r\n                      }}\r\n                    >\r\n                      37%\r\n                    </h1>\r\n                    <h3\r\n                      style={{\r\n                        color: \"#f88\",\r\n                        textAlign: \"center\"\r\n                      }}\r\n                    >\r\n                      Battery Status\r\n                    </h3>\r\n                  </CardContent>\r\n                  <CardActions />\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n        </div>\r\n        <div className={classes.root} style={{ backgroundColor: \"#000000\" }}>\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              direction=\"row\"\r\n              justify=\"space-around\"\r\n              alignItems=\"center\"\r\n              style={{ paddingTop: \"10px\" }}\r\n            >\r\n              <Grid item xs={9} md={9} lg={9}>\r\n                <Card\r\n                  className={classes.card}\r\n                  style={{\r\n                    width: 910,\r\n                    height: 300,\r\n                    backgroundColor: \"#282D33\"\r\n                  }}\r\n                  justify=\"flex-start\"\r\n                  alignItems=\"flex-start\"\r\n                  direction=\"row\"\r\n                >\r\n                  <CardContent>\r\n                    <Grid\r\n                      container\r\n                      spacing={5}\r\n                      direction=\"row\"\r\n                      justify=\"flex-start\"\r\n                      alignItems=\"flex-start\"\r\n                      style={{ paddingTop: \"10px\" }}\r\n                    >\r\n                      <Grid item xs={4} md={4} lg={4}>\r\n                        <div style={{ marginLeft: \"25px\" }}>\r\n                          <canvas\r\n                            data-type=\"radial-gauge\"\r\n                            data-width=\"225\"\r\n                            data-height=\"225\"\r\n                            data-units=\"Km/h\"\r\n                            data-min-value=\"0\"\r\n                            data-max-value=\"220\"\r\n                            data-major-ticks=\"0,20,40,60,80,100,120,140,160,180,200,220\"\r\n                            data-minor-ticks=\"2\"\r\n                            data-stroke-ticks=\"true\"\r\n                            data-highlights='[{\"from\": 160, \"to\": 220, \"color\": \"rgba(200, 50, 50, .75)\"}]'\r\n                            data-color-plate=\"#fff\"\r\n                            data-border-shadow-width=\"0\"\r\n                            data-borders=\"false\"\r\n                            data-needle-type=\"arrow\"\r\n                            data-needle-width=\"2\"\r\n                            data-needle-circle-size=\"7\"\r\n                            data-needle-circle-outer=\"true\"\r\n                            data-needle-circle-inner=\"false\"\r\n                            data-animation-duration=\"1500\"\r\n                            data-animation-rule=\"linear\"\r\n                          />\r\n                          <h4\r\n                            style={{\r\n                              color: \"#f88\",\r\n                              textAlign: \"center\",\r\n                              paddingBottom: \"5px\"\r\n                            }}\r\n                          >\r\n                            Speed\r\n                          </h4>\r\n                        </div>\r\n                      </Grid>\r\n                      <Grid item xs={4} md={4} lg={4}>\r\n                        <div style={{ marginLeft: \"25px\" }}>\r\n                          <canvas\r\n                            data-type=\"radial-gauge\"\r\n                            data-width=\"225\"\r\n                            data-height=\"225\"\r\n                            data-units=\"Km/h\"\r\n                            data-min-value=\"0\"\r\n                            data-max-value=\"220\"\r\n                            data-major-ticks=\"0,20,40,60,80,100,120,140,160,180,200,220\"\r\n                            data-minor-ticks=\"2\"\r\n                            data-stroke-ticks=\"true\"\r\n                            data-highlights='[{\"from\": 160, \"to\": 220, \"color\": \"rgba(200, 50, 50, .75)\"}]'\r\n                            data-color-plate=\"#fff\"\r\n                            data-border-shadow-width=\"0\"\r\n                            data-borders=\"false\"\r\n                            data-needle-type=\"arrow\"\r\n                            data-needle-width=\"2\"\r\n                            data-needle-circle-size=\"7\"\r\n                            data-needle-circle-outer=\"true\"\r\n                            data-needle-circle-inner=\"false\"\r\n                            data-animation-duration=\"1500\"\r\n                            data-animation-rule=\"linear\"\r\n                          />\r\n                          <h4\r\n                            style={{\r\n                              color: \"#f88\",\r\n                              textAlign: \"center\",\r\n                              paddingBottom: \"25px\"\r\n                            }}\r\n                          >\r\n                            Acceleration\r\n                          </h4>\r\n                        </div>\r\n                      </Grid>\r\n                      <Grid item xs={4} md={4} lg={4}>\r\n                        <LiquidFillGauge\r\n                          style={{ margin: \"0 auto\" }}\r\n                          width={radius * 2}\r\n                          height={radius * 2}\r\n                          value={this.state.value}\r\n                          percent=\"%\"\r\n                          textSize={1}\r\n                          textOffsetX={0}\r\n                          textOffsetY={0}\r\n                          textRenderer={props => {\r\n                            const value = Math.round(props.value);\r\n                            const radius = Math.min(\r\n                              props.height / 2,\r\n                              props.width / 2\r\n                            );\r\n                            const textPixels = (props.textSize * radius) / 2;\r\n                            const valueStyle = {\r\n                              fontSize: textPixels\r\n                            };\r\n                            const percentStyle = {\r\n                              fontSize: textPixels * 0.6\r\n                            };\r\n\r\n                            return (\r\n                              <tspan>\r\n                                <tspan className=\"value\" style={valueStyle}>\r\n                                  {value}\r\n                                </tspan>\r\n                                <tspan style={percentStyle}>\r\n                                  {props.percent}\r\n                                </tspan>\r\n                              </tspan>\r\n                            );\r\n                          }}\r\n                          riseAnimation\r\n                          waveAnimation\r\n                          waveFrequency={2}\r\n                          waveAmplitude={1}\r\n                          gradient\r\n                          gradientStops={gradientStops}\r\n                          circleStyle={{\r\n                            fill: fillColor\r\n                          }}\r\n                          waveStyle={{\r\n                            fill: fillColor\r\n                          }}\r\n                          textStyle={{\r\n                            fill: color(\"#444\").toString(),\r\n                            fontFamily: \"Arial\"\r\n                          }}\r\n                          waveTextStyle={{\r\n                            fill: color(\"#f88\").toString(),\r\n                            fontFamily: \"Arial\"\r\n                          }}\r\n                        />\r\n                        <h4\r\n                          style={{\r\n                            color: \"#f88\",\r\n                            textAlign: \"center\"\r\n                          }}\r\n                        >\r\n                          Fuel Indicator\r\n                        </h4>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n              <Grid item xs={3} md={3} lg={3}>\r\n                <Card\r\n                  className={classes.card}\r\n                  style={{\r\n                    width: 300,\r\n                    height: 300,\r\n                    backgroundColor: \"#282D33\"\r\n                  }}\r\n                >\r\n                  <Container maxWidth=\"lg\" className={classes.container}>\r\n                    <Grid\r\n                      container\r\n                      spacing={2}\r\n                      direction=\"row\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Grid item xs sm md lg>\r\n                        <canvas\r\n                          data-type=\"linear-gauge\"\r\n                          data-width=\"100\"\r\n                          data-height=\"250\"\r\n                          data-units=\"°C\"\r\n                          data-min-value=\"0\"\r\n                          data-max-value=\"220\"\r\n                          data-major-ticks=\"0,20,40,60,80,100,120,140,160,180,200,220\"\r\n                          data-minor-ticks=\"2\"\r\n                          data-stroke-ticks=\"true\"\r\n                          data-highlights='[ {\"from\": 100, \"to\": 220, \"color\": \"rgba(200, 50, 50, .75)\"} ]'\r\n                          data-color-plate=\"#fff\"\r\n                          data-border-shadow-width=\"0\"\r\n                          data-borders=\"false\"\r\n                          data-needle-type=\"arrow\"\r\n                          data-needle-width=\"2\"\r\n                          data-animation-duration=\"1500\"\r\n                          data-animation-rule=\"linear\"\r\n                          data-tick-side=\"left\"\r\n                          data-number-side=\"left\"\r\n                          data-needle-side=\"left\"\r\n                          data-bar-stroke-width=\"7\"\r\n                          data-bar-begin-circle=\"false\"\r\n                          data-value=\"75\"\r\n                        />\r\n                        <h4\r\n                          style={{\r\n                            color: \"#f88\",\r\n                            textAlign: \"center\"\r\n                          }}\r\n                        >\r\n                          Temperature\r\n                        </h4>\r\n                      </Grid>\r\n                      <Grid item xs sm md lg>\r\n                        <canvas\r\n                          data-type=\"linear-gauge\"\r\n                          data-width=\"100\"\r\n                          data-height=\"250\"\r\n                          data-units=\"Pa\"\r\n                          data-min-value=\"0\"\r\n                          data-start-angle=\"90\"\r\n                          data-ticks-angle=\"180\"\r\n                          data-value-box=\"false\"\r\n                          data-max-value=\"220\"\r\n                          data-major-ticks=\"0,20,40,60,80,100,120,140,160,180,200,220\"\r\n                          data-minor-ticks=\"2\"\r\n                          data-stroke-ticks=\"true\"\r\n                          data-highlights='[ {\"from\": 100, \"to\": 220, \"color\": \"rgba(200, 50, 50, .75)\"} ]'\r\n                          data-color-plate=\"#fff\"\r\n                          data-border-shadow-width=\"0\"\r\n                          data-borders=\"false\"\r\n                          data-needle-type=\"arrow\"\r\n                          data-needle-width=\"2\"\r\n                          data-needle-circle-size=\"7\"\r\n                          data-needle-circle-outer=\"true\"\r\n                          data-needle-circle-inner=\"false\"\r\n                          data-animation-duration=\"1500\"\r\n                          data-animation-rule=\"linear\"\r\n                          data-bar-width=\"10\"\r\n                          data-value=\"35\"\r\n                        />\r\n                        <h4\r\n                          style={{\r\n                            color: \"#f88\",\r\n                            textAlign: \"center\"\r\n                          }}\r\n                        >\r\n                          Pressure\r\n                        </h4>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Container>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </Container>\r\n          <div className={classes.root} style={{ backgroundColor: \"#000000\" }}>\r\n            <Container maxWidth=\"lg\" className={classes.container}>\r\n              <Grid\r\n                container\r\n                spacing={2}\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"flex-start\"\r\n                style={{ paddingTop: \"10px\" }}\r\n              >\r\n                <Grid item xs={9} md={9} lg={9}>\r\n                  <Card\r\n                    className={classes.card}\r\n                    style={{\r\n                      width: 910,\r\n                      height: 100,\r\n                      backgroundColor: \"#282D33\"\r\n                    }}\r\n                  >\r\n                    <CardContent>\r\n                      <LinearProgress\r\n                        color=\"secondary\"\r\n                        variant=\"determinate\"\r\n                        value={this.state.completed}\r\n                      />\r\n\r\n                      <p\r\n                        style={{\r\n                          color: \"#f88\",\r\n                          textAlign: \"center\"\r\n                        }}\r\n                      >\r\n                        {this.state.completed}\r\n                      </p>\r\n                      <h5\r\n                        style={{\r\n                          color: \"#f88\",\r\n                          textAlign: \"center\"\r\n                        }}\r\n                      >\r\n                        Distance Travelled\r\n                      </h5>\r\n                    </CardContent>\r\n                  </Card>\r\n                </Grid>\r\n                <Grid item xs={3} md={3} lg={3}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    style={{\r\n                      width: 300,\r\n                      height: 100,\r\n                      textSize: 100\r\n                      //backgroundColor: \"#282D33\"\r\n                    }}\r\n                  >\r\n                    EMERGENCY STOP\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Container>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProj.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(Proj);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Proj from \"./component/main.jsx\";\n\nReactDOM.render(<Proj />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}